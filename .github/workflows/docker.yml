name: Docker Image CI for Docker Hub

on:
  schedule:
    - cron: '0 3 * * 0'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04  # 指定为 24.04 的稳定版本
    strategy:
      matrix:
        platform: [ 'linux/amd64', 'linux/arm64' ]  # 使用 Matrix 策略构建多个平台

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # 克隆指定的项目仓库
    - name: Clone the external repository
      run: |
        git clone https://github.com/harry0703/MoneyPrinterTurbo.git
        cd MoneyPrinterTurbo

    # 查找并修改 Dockerfile
    - name: Modify Dockerfile to use slim version if not present
      run: |
        cd MoneyPrinterTurbo
        if grep -q '^FROM python:' Dockerfile && ! grep -q 'slim' Dockerfile; then
          sed -i 's|^FROM python:\([0-9.]\+\)|FROM python:\1-slim|' Dockerfile
          echo "Dockerfile modified to use slim version."
        else
          echo "Dockerfile is already using slim version or not using python."
        fi

    # 设置 QEMU，以支持多平台构建
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    # 设置 Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 设置构建日期
    - name: Set build date
      id: date
      run: echo "BUILD_DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV  # 设置构建日期为 year.month.date

    # 设置 Docker 镜像元数据
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          neowitch/moneyprinterturbo  # 使用你的 Docker Hub 用户名和项目名称
        tags: |
          type=raw,value=${{ env.BUILD_DATE }}  # 使用日期作为标签
          type=raw,value=latest  # 同时使用 latest 标签

    # 登录 Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}  # 在 GitHub Secrets 中设置
        password: ${{ secrets.DOCKER_PASSWORD }}  # 在 GitHub Secrets 中设置

    # 构建并推送 Docker 镜像
    - name: Build and push
      uses: docker/build-push-action@v5  # 使用最新稳定版本 v5
      with:
        context: MoneyPrinterTurbo  # 构建上下文设置为克隆的仓库目录
        platforms: linux/amd64,linux/arm64  # 直接指定多个平台
        push: true
        tags: ${{ steps.meta.outputs.tags }}  # 使用日期和 latest 标签
        labels: ${{ steps.meta.outputs.labels }}
